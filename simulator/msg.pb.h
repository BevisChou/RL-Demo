// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_Config;
class Request_ConfigDefaultTypeInternal;
extern Request_ConfigDefaultTypeInternal _Request_Config_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_State;
class Response_StateDefaultTypeInternal;
extern Response_StateDefaultTypeInternal _Response_State_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
template<> ::Request_Config* Arena::CreateMaybeMessage<::Request_Config>(Arena*);
template<> ::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
template<> ::Response_State* Arena::CreateMaybeMessage<::Response_State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Request_RequestType : int {
  Request_RequestType_RESET = 0,
  Request_RequestType_STEP = 1,
  Request_RequestType_CLOSE = 2
};
bool Request_RequestType_IsValid(int value);
constexpr Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_RESET;
constexpr Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_CLOSE;
constexpr int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor();
template<typename T>
inline const std::string& Request_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_RequestType_descriptor(), enum_t_value);
}
inline bool Request_RequestType_Parse(
    const std::string& name, Request_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
// ===================================================================

class Request_Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request.Config) */ {
 public:
  inline Request_Config() : Request_Config(nullptr) {};
  virtual ~Request_Config();

  Request_Config(const Request_Config& from);
  Request_Config(Request_Config&& from) noexcept
    : Request_Config() {
    *this = ::std::move(from);
  }

  inline Request_Config& operator=(const Request_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_Config& operator=(Request_Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_Config* internal_default_instance() {
    return reinterpret_cast<const Request_Config*>(
               &_Request_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request_Config& a, Request_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_Config* New() const final {
    return CreateMaybeMessage<Request_Config>(nullptr);
  }

  Request_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_Config& from);
  void MergeFrom(const Request_Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request.Config";
  }
  protected:
  explicit Request_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGFieldNumber = 1,
    kKFieldNumber = 2,
    kLFieldNumber = 3,
    kMFieldNumber = 4,
    kWFieldNumber = 5,
  };
  // required double g = 1;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  double g() const;
  void set_g(double value);
  private:
  double _internal_g() const;
  void _internal_set_g(double value);
  public:

  // required double k = 2;
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  double k() const;
  void set_k(double value);
  private:
  double _internal_k() const;
  void _internal_set_k(double value);
  public:

  // required double l = 3;
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  double l() const;
  void set_l(double value);
  private:
  double _internal_l() const;
  void _internal_set_l(double value);
  public:

  // required double m = 4;
  bool has_m() const;
  private:
  bool _internal_has_m() const;
  public:
  void clear_m();
  double m() const;
  void set_m(double value);
  private:
  double _internal_m() const;
  void _internal_set_m(double value);
  public:

  // required double w = 5;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:Request.Config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double g_;
  double k_;
  double l_;
  double m_;
  double w_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_Config Config;

  typedef Request_RequestType RequestType;
  static constexpr RequestType RESET =
    Request_RequestType_RESET;
  static constexpr RequestType STEP =
    Request_RequestType_STEP;
  static constexpr RequestType CLOSE =
    Request_RequestType_CLOSE;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return Request_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(const std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 3,
    kActionFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .Request.Config config = 3;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::Request_Config& config() const;
  ::Request_Config* release_config();
  ::Request_Config* mutable_config();
  void set_allocated_config(::Request_Config* config);
  private:
  const ::Request_Config& _internal_config() const;
  ::Request_Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::Request_Config* config);
  ::Request_Config* unsafe_arena_release_config();

  // optional double action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  double action() const;
  void set_action(double value);
  private:
  double _internal_action() const;
  void _internal_set_action(double value);
  public:

  // required .Request.RequestType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Request_RequestType type() const;
  void set_type(::Request_RequestType value);
  private:
  ::Request_RequestType _internal_type() const;
  void _internal_set_type(::Request_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Request_Config* config_;
  double action_;
  int type_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Response_State PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Response.State) */ {
 public:
  inline Response_State() : Response_State(nullptr) {};
  virtual ~Response_State();

  Response_State(const Response_State& from);
  Response_State(Response_State&& from) noexcept
    : Response_State() {
    *this = ::std::move(from);
  }

  inline Response_State& operator=(const Response_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_State& operator=(Response_State&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_State* internal_default_instance() {
    return reinterpret_cast<const Response_State*>(
               &_Response_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response_State& a, Response_State& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_State* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_State* New() const final {
    return CreateMaybeMessage<Response_State>(nullptr);
  }

  Response_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_State& from);
  void MergeFrom(const Response_State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Response.State";
  }
  protected:
  explicit Response_State(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kAngularVelocityFieldNumber = 2,
  };
  // required double angle = 1;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // required double angular_velocity = 2;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  double angular_velocity() const;
  void set_angular_velocity(double value);
  private:
  double _internal_angular_velocity() const;
  void _internal_set_angular_velocity(double value);
  public:

  // @@protoc_insertion_point(class_scope:Response.State)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double angle_;
  double angular_velocity_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Response_State State;

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // required .Response.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::Response_State& state() const;
  ::Response_State* release_state();
  ::Response_State* mutable_state();
  void set_allocated_state(::Response_State* state);
  private:
  const ::Response_State& _internal_state() const;
  ::Response_State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::Response_State* state);
  ::Response_State* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Response_State* state_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request_Config

// required double g = 1;
inline bool Request_Config::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_Config::has_g() const {
  return _internal_has_g();
}
inline void Request_Config::clear_g() {
  g_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Request_Config::_internal_g() const {
  return g_;
}
inline double Request_Config::g() const {
  // @@protoc_insertion_point(field_get:Request.Config.g)
  return _internal_g();
}
inline void Request_Config::_internal_set_g(double value) {
  _has_bits_[0] |= 0x00000001u;
  g_ = value;
}
inline void Request_Config::set_g(double value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:Request.Config.g)
}

// required double k = 2;
inline bool Request_Config::_internal_has_k() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_Config::has_k() const {
  return _internal_has_k();
}
inline void Request_Config::clear_k() {
  k_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Request_Config::_internal_k() const {
  return k_;
}
inline double Request_Config::k() const {
  // @@protoc_insertion_point(field_get:Request.Config.k)
  return _internal_k();
}
inline void Request_Config::_internal_set_k(double value) {
  _has_bits_[0] |= 0x00000002u;
  k_ = value;
}
inline void Request_Config::set_k(double value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:Request.Config.k)
}

// required double l = 3;
inline bool Request_Config::_internal_has_l() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_Config::has_l() const {
  return _internal_has_l();
}
inline void Request_Config::clear_l() {
  l_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Request_Config::_internal_l() const {
  return l_;
}
inline double Request_Config::l() const {
  // @@protoc_insertion_point(field_get:Request.Config.l)
  return _internal_l();
}
inline void Request_Config::_internal_set_l(double value) {
  _has_bits_[0] |= 0x00000004u;
  l_ = value;
}
inline void Request_Config::set_l(double value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:Request.Config.l)
}

// required double m = 4;
inline bool Request_Config::_internal_has_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request_Config::has_m() const {
  return _internal_has_m();
}
inline void Request_Config::clear_m() {
  m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Request_Config::_internal_m() const {
  return m_;
}
inline double Request_Config::m() const {
  // @@protoc_insertion_point(field_get:Request.Config.m)
  return _internal_m();
}
inline void Request_Config::_internal_set_m(double value) {
  _has_bits_[0] |= 0x00000008u;
  m_ = value;
}
inline void Request_Config::set_m(double value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:Request.Config.m)
}

// required double w = 5;
inline bool Request_Config::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request_Config::has_w() const {
  return _internal_has_w();
}
inline void Request_Config::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Request_Config::_internal_w() const {
  return w_;
}
inline double Request_Config::w() const {
  // @@protoc_insertion_point(field_get:Request.Config.w)
  return _internal_w();
}
inline void Request_Config::_internal_set_w(double value) {
  _has_bits_[0] |= 0x00000010u;
  w_ = value;
}
inline void Request_Config::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Request.Config.w)
}

// -------------------------------------------------------------------

// Request

// required .Request.RequestType type = 1;
inline bool Request::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_type() const {
  return _internal_has_type();
}
inline void Request::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Request_RequestType Request::_internal_type() const {
  return static_cast< ::Request_RequestType >(type_);
}
inline ::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::Request_RequestType value) {
  assert(::Request_RequestType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Request::set_type(::Request_RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Request.type)
}

// optional double action = 2;
inline bool Request::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_action() const {
  return _internal_has_action();
}
inline void Request::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Request::_internal_action() const {
  return action_;
}
inline double Request::action() const {
  // @@protoc_insertion_point(field_get:Request.action)
  return _internal_action();
}
inline void Request::_internal_set_action(double value) {
  _has_bits_[0] |= 0x00000002u;
  action_ = value;
}
inline void Request::set_action(double value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Request.action)
}

// optional .Request.Config config = 3;
inline bool Request::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool Request::has_config() const {
  return _internal_has_config();
}
inline void Request::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Request_Config& Request::_internal_config() const {
  const ::Request_Config* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Request_Config*>(
      &::_Request_Config_default_instance_);
}
inline const ::Request_Config& Request::config() const {
  // @@protoc_insertion_point(field_get:Request.config)
  return _internal_config();
}
inline void Request::unsafe_arena_set_allocated_config(
    ::Request_Config* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.config)
}
inline ::Request_Config* Request::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Request_Config* Request::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:Request.config)
  _has_bits_[0] &= ~0x00000001u;
  ::Request_Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::Request_Config* Request::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::Request_Config>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::Request_Config* Request::mutable_config() {
  // @@protoc_insertion_point(field_mutable:Request.config)
  return _internal_mutable_config();
}
inline void Request::set_allocated_config(::Request_Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:Request.config)
}

// -------------------------------------------------------------------

// Response_State

// required double angle = 1;
inline bool Response_State::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_State::has_angle() const {
  return _internal_has_angle();
}
inline void Response_State::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Response_State::_internal_angle() const {
  return angle_;
}
inline double Response_State::angle() const {
  // @@protoc_insertion_point(field_get:Response.State.angle)
  return _internal_angle();
}
inline void Response_State::_internal_set_angle(double value) {
  _has_bits_[0] |= 0x00000001u;
  angle_ = value;
}
inline void Response_State::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:Response.State.angle)
}

// required double angular_velocity = 2;
inline bool Response_State::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response_State::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void Response_State::clear_angular_velocity() {
  angular_velocity_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Response_State::_internal_angular_velocity() const {
  return angular_velocity_;
}
inline double Response_State::angular_velocity() const {
  // @@protoc_insertion_point(field_get:Response.State.angular_velocity)
  return _internal_angular_velocity();
}
inline void Response_State::_internal_set_angular_velocity(double value) {
  _has_bits_[0] |= 0x00000002u;
  angular_velocity_ = value;
}
inline void Response_State::set_angular_velocity(double value) {
  _internal_set_angular_velocity(value);
  // @@protoc_insertion_point(field_set:Response.State.angular_velocity)
}

// -------------------------------------------------------------------

// Response

// required .Response.State state = 1;
inline bool Response::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool Response::has_state() const {
  return _internal_has_state();
}
inline void Response::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Response_State& Response::_internal_state() const {
  const ::Response_State* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Response_State*>(
      &::_Response_State_default_instance_);
}
inline const ::Response_State& Response::state() const {
  // @@protoc_insertion_point(field_get:Response.state)
  return _internal_state();
}
inline void Response::unsafe_arena_set_allocated_state(
    ::Response_State* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.state)
}
inline ::Response_State* Response::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Response_State* Response::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:Response.state)
  _has_bits_[0] &= ~0x00000001u;
  ::Response_State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::Response_State* Response::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Response_State>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::Response_State* Response::mutable_state() {
  // @@protoc_insertion_point(field_mutable:Response.state)
  return _internal_mutable_state();
}
inline void Response::set_allocated_state(::Response_State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:Response.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Request_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Request_RequestType>() {
  return ::Request_RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
